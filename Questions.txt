---------------------- Array Questions ------------------------
=> Array Questions(From jsCafe.dev)
1. Contains Duplicate
2. Valid Anagram 
3. Two Sum
4. Product of array except self 
5. Maximum Subarray 
6. Container with most water
7. Insert Interval
8. Merge Intervals 

-------------------- String Questions -----------------------
=> String Questions(From jsCafe.dev)
1. Remove Duplicates from a String	
2. Reverse Words in sentence 	
3. Count Palindromes in string 	
4. Longest Palindromic Subsequence	
5. Longest Common Substring	
6. Longest Common Subsequence	
7. Minimum Insertions and Deletions	 
8. Maximum Substring With Max K Distinct Characters	
9. String Permutations By Changing Case	

// From learnersbucket.com
1. Highlight the words in the string


--------------------- JS Questions -----------------------------
1. Debouncing/Throtlling
2. Memoization 
3. Pollyfills
4. OOPs concepts
5. Machine Coding Round
6. DS/Algo
7. Array/String Questions
8. Designing of Website


// from work@tech website 

1. cumulative Sum
2. positive cumulative Sum
3. identical twins
4. Even number of digits
5. implement insertion sort
6. merge two sorted arrays
7. merge sorted arrays
8. implement merge sort 
9. implement Quick sort 
10. square sorted array
11. max consecutive ones
12. arithmetic sequence 
13. largest contiguous Sum
14. pascal's triangle
15. row column zero
16. matrix rotation
17. primes upto N
18. Merge Overlapping Intervals
19. Kth largest element
20. Inversion Count


// Implement a function that takes one or more values and returns a function that cycles through those values each time it is called.
const helloFn = cycle('hello');
console.log(helloFn()); // "hello"
console.log(helloFn()); // "hello"

const onOffFn = cycle('on', 'off');
console.log(onOffFn()); // "on"
console.log(onOffFn()); // "off"
console.log(onOffFn()); // "on"

// solution 
export default function cycle(...values) {
  let index = 0;

  return () => {
    const currentValue = values[index];
    index = (index + 1) % values.length;
    return currentValue;
  };
}


// Mid to Advance level
1. Reverse a linked list.
2. Find the middle element of a linked list.
3. Implement a stack using arrays/linked list.
4. Implement a queue using arrays/linked list.
5. Find the factorial of a number using recursion.
6. Implement binary search in an array.
7. Find the largest/smallest element in an array.
8. Implement merge sort.
9. Implement quick sort.
10. Detect a cycle in a linked list.
11. Find the intersection point of two linked lists.
12. Check if a binary tree is a binary search tree (BST).
13. Print all leaf nodes of a binary tree.
14. Reverse a binary tree.
15. Find the height of a binary tree.
16. Implement depth-first search (DFS) on a graph.
17. Implement breadth-first search (BFS) on a graph.
18. Check if a graph is connected.
19. Implement Dijkstra's algorithm for shortest path.
20. Implement Prim's algorithm for minimum spanning tree.
21. Implement Kruskal's algorithm for minimum spanning tree.
22. Find the longest common subsequence of two strings.
23. Find the longest increasing subsequence of an array.
24. Implement the Knuth–Morris–Pratt (KMP) algorithm for string matching.
25. Implement the Rabin-Karp algorithm for string matching.
26. Check if a string is a palindrome.
27. Check if two strings are anagrams of each other.
28. Find the next greater element in an array.
29. Find the kth smallest/largest element in an array.
30. Find the median of two sorted arrays.
31. Implement a trie (prefix tree).
32. Find all subsets of a set.
33. Find all permutations of a string.
34. Implement the Josephus Problem.
35. Implement an LRU (Least Recently Used) Cache.
36. Find the longest palindrome substring in a string.
37. Implement a priority queue.
38. Implement a hashmap (dictionary).
39. Count the number of inversions in an array.
40. Find the shortest path in a maze.


